@page "/match"
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Authorization
@using Alicante.Client.BaseComponents
@using Newtonsoft.Json
@rendermode @(new InteractiveWebAssemblyRenderMode(false))

<h3>Match liste</h3>

@if (matches == null)
{
    <p>Henter ...</p>
}
else
{
    <RadzenDataGrid @ref="matchGrid" AllowAlternatingRows="false" EditMode="DataGridEditMode.Single"
                    Data="@matches" TItem="MatchViewModel" RowUpdate="@OnUpdateRow" 
                    RowCreate="@OnCreateRow">
        <HeaderTemplate>
            <RadzenStack AlignItems="AlignItems.End">
                <RadzenButton ButtonStyle="ButtonStyle.Success" Icon="add_circle" 
                    Text="Ny match" Click="@InsertRow" Disabled="@Editing" />
            </RadzenStack>
        </HeaderTemplate>
        <Columns>
            <RadzenDataGridColumn Property="@nameof(MatchViewModel.MatchDate)" CssClass="col-md-auto" Title="Dato" Frozen="true">
                <Template Context="match">
                    @match.MatchDate.ToString("dd MMM, yyyy")
                </Template>
                <EditTemplate Context="match">
                    <RadzenDatePicker Style="width: 100%;" Name="MatchDate" DateFormat="dd-MM-yyyy" @bind-Value="match.MatchDate" />
                    <RadzenRequiredValidator Text="Skal angives" Component="matchDate" Popup="true" />
                </EditTemplate>
            </RadzenDataGridColumn>

            <RadzenDataGridColumn Property="@nameof(MatchViewModel.CourseId)" Title="Bane" TextAlign="TextAlign.Center" CssClass="col">
                <Template Context="match">
                    @match.CourseName
                </Template>
                <EditTemplate Context="match">
                    <RadzenDropDown @bind-Value="match.CourseId" AllowClear="true" Placeholder="Vælg bane"
                                    Data="@courses" Style="width: 100%;" 
                                    TextProperty="CourseName" ValueProperty="CourseId" Name="CourseId">
                    </RadzenDropDown>
                </EditTemplate>
            </RadzenDataGridColumn>

            <RadzenDataGridColumn Context="match" Width="160px" TextAlign="TextAlign.Right" Frozen="true" FrozenPosition="FrozenColumnPosition.Right">
                <Template Context="match">
                    <RadzenButton Icon="edit" ButtonStyle="ButtonStyle.Light" Variant="Variant.Flat" Size="Radzen.ButtonSize.Medium" Click="@(args => EditRow(match))" @onclick:stopPropagation="true">
                    </RadzenButton>
                    <RadzenButton ButtonStyle="ButtonStyle.Danger" Icon="delete" Variant="Variant.Flat" Shade="Shade.Lighter" Size="Radzen.ButtonSize.Medium" class="rz-my-1 rz-ms-1" Click="@(args => DeleteRow(match))" @onclick:stopPropagation="true">
                    </RadzenButton>
                </Template>
                <EditTemplate Context="match">
                    <RadzenButton Icon="check" ButtonStyle="ButtonStyle.Success" Variant="Variant.Flat" Size="Radzen.ButtonSize.Medium" Click="@((args) => SaveRow(match))" aria-label="Save">
                    </RadzenButton>
                    <RadzenButton Icon="close" ButtonStyle="ButtonStyle.Light" Variant="Variant.Flat" Size="Radzen.ButtonSize.Medium" class="rz-my-1 rz-ms-1" Click="@((args) => CancelEdit(match))" aria-label="Cancel">
                    </RadzenButton>
                    <RadzenButton ButtonStyle="ButtonStyle.Danger" Icon="delete" Variant="Variant.Flat" Shade="Shade.Lighter" Size="Radzen.ButtonSize.Medium" class="rz-my-1 rz-ms-1" Click="@(args => DeleteRow(match))" aria-label="Delete">
                    </RadzenButton>
                </EditTemplate>
            </RadzenDataGridColumn>
        </Columns>
    </RadzenDataGrid>
}
<AppModal />
<ConfirmDialog @ref="dialog" />

@code {
    RadzenDataGrid<MatchViewModel> matchGrid;
    private ConfirmDialog dialog = default!;

    [Inject] public HttpClient http { get; set; }
    public List<MatchViewModel> matches { get; set; }
    public List<MatchViewModel> persistedMatches { get; set; }
    public List<CourseModel> courses { get; set; }

    public bool Editing { get; set; } = false;

    [Inject] private BlazorBootstrap.ToastService ToastService { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        var res = await http.GetFromJsonAsync<BaseResponseModel>("/api/Course");
        if (res != null && res.Success)
        {
            courses = JsonConvert.DeserializeObject<List<CourseModel>>(res.Data.ToString());
        }
        await LoadData();
    }

    #region Grid events

    async Task OnUpdateRow(MatchViewModel match)
    {
        await SaveRow(match);
    }
    async void OnCreateRow(MatchViewModel match)
    {
        //await UpdateRow(match);
        throw new NotImplementedException("OnCreateRow called");
    }

    async Task EditRow(MatchViewModel match)
    {
        matches = persistedMatches;
        await matchGrid.EditRow(match);
        Editing = true;
    }
    async Task SaveRow(MatchViewModel match)
    {
        MatchModel model = new()
        {
            MatchId = match.MatchId,
            CourseId = match.CourseId,
            MatchDate = match.MatchDate,
        };
        var res = await http.PostAsJsonAsync<MatchModel>($"/api/match/", model);
        if (res!.IsSuccessStatusCode)
        {
            ToastService.Notify(new(ToastType.Success, "Matchen er opdateret"));
            await LoadData();
        }
        else
        {
            ToastService.Notify(new(ToastType.Warning, "Der opstod en fejl"));
            matchGrid.CancelEditRow(match);
        }
        await matchGrid.Reload();
        Editing = false;
    }
    async Task DeleteRow(MatchViewModel match)
    {
        var options = new ConfirmDialogOptions { Size = DialogSize.Small };

        var confirmation = await dialog.ShowAsync(
            title: "Hva sååå!",
            message1: "Skal den slettes?",
            confirmDialogOptions: options);

        if (!confirmation)
        {
            return;
        }

        var res = await http.DeleteFromJsonAsync<BaseResponseModel>($"/api/match/{match.MatchId}");
        if (res!.Success)
        {
            ToastService.Notify(new(ToastType.Success, "Matchen er slettet"));
            var matchToRemove = persistedMatches.FirstOrDefault(m => m.MatchId == match.MatchId);
            if (matchToRemove != null)
            {
                persistedMatches.Remove(matchToRemove);
                matches = persistedMatches;
            }
        }
        else
        {
            matchGrid.CancelEditRow(match);
        }
        await matchGrid.Reload();
    }
    async Task InsertRow()
    {
        var match = new MatchViewModel();
        await matchGrid.InsertRow(match);
        Editing = true;
    }
    void CancelEdit(MatchViewModel match)
    {
        matchGrid.CancelEditRow(match);
        Editing = false;
    }
    #endregion

    protected async Task LoadData()
    {
        var res = await http.GetFromJsonAsync<BaseResponseModel>("/api/match");
        if (res != null && res.Success)
        {
            persistedMatches = JsonConvert.DeserializeObject<List<MatchViewModel>>(res.Data.ToString());
            matches = persistedMatches;
        }
    }
}

