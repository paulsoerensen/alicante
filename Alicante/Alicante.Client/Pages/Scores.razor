@page "/scores"
@using Newtonsoft.Json
@rendermode @(new InteractiveWebAssemblyRenderMode(false))

@if (matches == null)
{
    <p>Henter ...</p>
}
else
{
    <RadzenTabs TabPosition="TabPosition.Top" RenderMode="TabRenderMode.Client">
        <Tabs>
            <RadzenTabsItem Text="Scores">
                <RadzenTabs TabPosition="TabPosition.Top" RenderMode="TabRenderMode.Client">
                    <Tabs>
                        @foreach (var match in matches)
                        {
                            <RadzenTabsItem Text="@match.CourseName">
                                <RadzenDataGrid ColumnWidth="50px" Data="@scores.Where(m => m.MatchId == match.MatchId)" TItem="MatchResultViewModel">
                                    <Columns>
                                        <RadzenDataGridColumn Property="@nameof(MatchResultViewModel.PlayerName)" Title="Spiller" MinWidth="150px" />
                                        <RadzenDataGridColumn Property="@nameof(MatchResultViewModel.Score)" Title="Brutto" />
                                        <RadzenDataGridColumn Property="@nameof(MatchResultViewModel.Hcp)" Title="ATS" />
                                        <RadzenDataGridColumn Property="@nameof(MatchResultViewModel.Netto)" Title="Netto" />
                                    </Columns>
                                </RadzenDataGrid>
                            </RadzenTabsItem>
                        }
                    </Tabs>
                </RadzenTabs>
            </RadzenTabsItem>
            <RadzenTabsItem Text="Par 3">
                <RadzenTabs TabPosition="TabPosition.Top" RenderMode="TabRenderMode.Client">
                    <Tabs>
                        @foreach (var match in matches)
                        {
                            <RadzenTabsItem Text="@match.CourseName">
                                <RadzenDataGrid ColumnWidth="50px" Data="@par3s.Where(m => m.MatchId == match.MatchId)" TItem="MatchResultViewModel">
                                    <Columns>
                                        <RadzenDataGridColumn Property="@nameof(MatchResultViewModel.PlayerName)" Title="Spiller" />
                                        <RadzenDataGridColumn Property="@nameof(MatchResultViewModel.Par3)" Title="Par 3" />
                                    </Columns>
                                </RadzenDataGrid>
                            </RadzenTabsItem>
                        }
                    </Tabs>
                </RadzenTabs>
            </RadzenTabsItem>
            <RadzenTabsItem Text="Birdies">
                <RadzenTabs TabPosition="TabPosition.Top" RenderMode="TabRenderMode.Client">
                    <Tabs>
                        @foreach (var match in matches)
                        {
                            <RadzenTabsItem Text="@match.CourseName">
                                <RadzenDataGrid ColumnWidth="50px" Data="@birdies.Where(m => m.MatchId == match.MatchId)" TItem="MatchResultViewModel">
                                    <Columns>
                                        <RadzenDataGridColumn Property="@nameof(MatchResultViewModel.PlayerName)" Title="Spiller" />
                                        <RadzenDataGridColumn Property="@nameof(MatchResultViewModel.Birdies)" Title="Birdies" />
                                    </Columns>
                                </RadzenDataGrid>
                            </RadzenTabsItem>
                        }
                    </Tabs>
                </RadzenTabs>
            </RadzenTabsItem>
        </Tabs>
    </RadzenTabs>
}

@code {
    [Inject] public HttpClient http { get; set; }
    [Inject] public AppState _appState { get; set; }

    public IEnumerable<MatchResultViewModel> scores { get; set; }
    public IEnumerable<MatchResultViewModel> birdies { get; set; }
    public IEnumerable<MatchResultViewModel> par3s { get; set; }
    public IEnumerable<MatchHeader> matches { get; set; }

    public TournamentModel ActiveTournament { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        var res = await http.GetFromJsonAsync<BaseResponseModel>($"/api/tournament/active");
        if (!res!.Success)
        {
            return;
        }
        ActiveTournament = JsonConvert.DeserializeObject<TournamentModel>(res.Data.ToString());
        res = await http.GetFromJsonAsync<BaseResponseModel>($"/api/result/score/{ActiveTournament.TournamentId}");
        if (res != null && res.Success)
        {
            var results = JsonConvert.DeserializeObject<List<MatchResultViewModel>>(res.Data.ToString());
            scores = results.OrderBy(m => m.Netto).ThenBy(m => m.HcpIndex);
            birdies = results.OrderByDescending(m => m.Birdies).ThenBy(m => m.HcpIndex);
            par3s = results.OrderBy(m => m.Par3).ThenBy(m => m.HcpIndex);
            matches = results
                .GroupBy(m => new { m.MatchDate, m.CourseName })   
                .OrderBy(g => g.Min(m => m.MatchRank))             
                .Select(g => new MatchHeader                       
                    {
                        MatchId = g.First().MatchId,               
                        MatchDate = g.Key.MatchDate,               
                        CourseName = g.Key.CourseName              
                    }).ToList();
        }
    }
}
