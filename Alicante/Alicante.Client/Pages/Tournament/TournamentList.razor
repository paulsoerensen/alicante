@page "/tournament"
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Authorization
@using Alicante.Client.BaseComponents
@using Newtonsoft.Json
@rendermode @(new InteractiveWebAssemblyRenderMode(false))

<h3>Turneringer</h3>
 
@if (tournaments == null)
{
    <p>Henter ...</p>
}
else
{
    <RadzenDataGrid @ref="tournamentGrid" AllowAlternatingRows="false" EditMode="DataGridEditMode.Single"
                Data="@tournaments" TItem="TournamentModel" RowUpdate="@OnUpdateRow" RowCreate="@OnCreateRow">
        <HeaderTemplate>
            <RadzenCard Variant="Variant.Flat" class="d-flex justify-content-end w-100">
                <RadzenText TextStyle="TextStyle.H6" TagName="TagName.H3">Aktuel turnering</RadzenText>
                <RadzenDropDown Style="width: 100%; max-width: 300px;" TValue="int" @bind-Value="activeId" Placeholder="Vælg match" AllowFiltering="true"
                                Data="@(tournaments)" TextProperty="@nameof(TournamentModel.TournamentName)" ValueProperty="@nameof(TournamentModel.TournamentId)"
                                InputAttributes="@(new Dictionary<string,object>(){ { "aria-label", "Vælg match" }})"
                                Change="() => ChangeActive()" />
            </RadzenCard>

            <div >
                <RadzenButton ButtonStyle="ButtonStyle.Success" Icon="add_circle" Text="Ny turnering"
                              Click="@InsertRow" Disabled="@Editing" />
            </div>
        </HeaderTemplate>
        <Columns>
            <RadzenDataGridColumn Property="@nameof(TournamentModel.TournamentName)" Title="Turnering">
                <EditTemplate Context="tournament">
                    <RadzenTextBox @bind-Value="tournament.TournamentName" Style="width:200px; display: block" Name="ShipName" aria-label="Angiv et navn" />
                    <RadzenRequiredValidator Text="Navn skal angives" Component="TournamentName" Popup="true" />
                </EditTemplate>
            </RadzenDataGridColumn>

            <RadzenDataGridColumn Context="tournament" Width="160px" TextAlign="TextAlign.Right" Frozen="true" FrozenPosition="FrozenColumnPosition.Right">
                <Template Context="tournament">
                    <RadzenButton Icon="edit" ButtonStyle="ButtonStyle.Light" Variant="Variant.Flat" Size="Radzen.ButtonSize.Medium" Click="@(args => EditRow(tournament))" @onclick:stopPropagation="true">
                    </RadzenButton>
                    <RadzenButton ButtonStyle="ButtonStyle.Danger" Icon="delete" Variant="Variant.Flat" Shade="Shade.Lighter" Size="Radzen.ButtonSize.Medium" class="rz-my-1 rz-ms-1" Click="@(args => DeleteRow(tournament))" @onclick:stopPropagation="true">
                    </RadzenButton>
                </Template>
                <EditTemplate Context="tournament">
                    <RadzenButton Icon="check" ButtonStyle="ButtonStyle.Success" Variant="Variant.Flat" Size="Radzen.ButtonSize.Medium" Click="@((args) => SaveRow(tournament))" aria-label="Save">
                    </RadzenButton>
                    <RadzenButton Icon="close" ButtonStyle="ButtonStyle.Light" Variant="Variant.Flat" Size="Radzen.ButtonSize.Medium" class="rz-my-1 rz-ms-1" Click="@((args) => CancelEdit(tournament))" aria-label="Cancel">
                    </RadzenButton>
                    <RadzenButton ButtonStyle="ButtonStyle.Danger" Icon="delete" Variant="Variant.Flat" Shade="Shade.Lighter" Size="Radzen.ButtonSize.Medium" class="rz-my-1 rz-ms-1" Click="@(args => DeleteRow(tournament))" aria-label="Delete">
                    </RadzenButton>
                </EditTemplate>
            </RadzenDataGridColumn>
        </Columns>
    </RadzenDataGrid>
}
<AppModal />
<ConfirmDialog @ref="dialog" />

@code {
    RadzenDataGrid<TournamentModel> tournamentGrid;
    private ConfirmDialog dialog = default!;

    [Inject] public HttpClient http { get; set; }
    [Inject] private BlazorBootstrap.ToastService ToastService { get; set; }
    [Inject] private DialogService DialogService { get; set; } = default!;
    [Inject] public AppState _appState { get; set; }


    public List<TournamentModel> tournaments { get; set; } = default!;
    public int activeId { get; set; }
    public int deleteId { get; set; }
    public bool Editing { get; set; } = false;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        await LoadData();
        activeId = tournaments.Where(x => x.Active == true).Select(x => x.TournamentId).SingleOrDefault();
        _appState.TournamentId = activeId;

        StateHasChanged();
    }

    #region Grid events

    async Task OnUpdateRow(TournamentModel tournament)
    {
        await SaveRow(tournament);
    }
    async void OnCreateRow(TournamentModel tournament)
    {
        //await UpdateRow(tournament);
        throw new NotImplementedException("OnCreateRow called");
    }

    async Task EditRow(TournamentModel tournament)
    {
        await tournamentGrid.EditRow(tournament);
        Editing = true;
    }
    async Task SaveRow(TournamentModel model)
    {
        var res = await http.PostAsJsonAsync($"/api/tournament/", model);
        if (res!.IsSuccessStatusCode)
        {
            ToastService.Notify(new(ToastType.Success, "Turneringen er gemt"));
            await LoadData();
        }
        else
        {
            ToastService.Notify(new(ToastType.Warning, "Der opstod en fejl"));
            tournamentGrid.CancelEditRow(model);
        }
        await tournamentGrid.Reload();
        Editing = false;
    }

    async Task DeleteRow(TournamentModel tournament)
    {
        var options = new ConfirmDialogOptions { Size = DialogSize.Small };

        var confirmation = await dialog.ShowAsync(
            title: "Hva sååå!",
            message1: "Skal den slettes?",
            confirmDialogOptions: options);

        if (!confirmation)
        {
            return;
        }

        var res = await http.DeleteFromJsonAsync<BaseResponseModel>($"/api/tournament/{tournament}");
        if (res!.Success)
        {
            ToastService.Notify(new(ToastType.Success, "Turneringen er slettet"));
        }
        else
        {
            tournamentGrid.CancelEditRow(tournament);
            ToastService.Notify(new(ToastType.Warning, res.ErrorMessage));
        }
        await tournamentGrid.Reload();
    }

    async Task InsertRow()
    {
        var tournament = new TournamentModel();
        await tournamentGrid.InsertRow(tournament);
        Editing = true;
    }
    void CancelEdit(TournamentModel tournament)
    {
        tournamentGrid.CancelEditRow(tournament);
        Editing = false;
    }
    #endregion

    async Task ChangeActive()
    {
        var res = await http.PostAsJsonAsync("/api/Tournament/active", activeId);
        if (res!.IsSuccessStatusCode)
        {
            _appState.TournamentId = activeId;
            ToastService.Notify(new(ToastType.Success, "Turneringen er nu aktivt"));
        }
    }

    protected async Task LoadData()
    {
        var res = await http.GetFromJsonAsync<BaseResponseModel>("/api/Tournament");
        if (res != null && res.Success)
        {
            tournaments = JsonConvert.DeserializeObject<List<TournamentModel>>(res.Data.ToString());
        }
    }
}

