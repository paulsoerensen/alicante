@using Alicante.Client.Models
@using Alicante.Data
@implements IDisposable

@inject NavigationManager NavigationManager


<BSNavbar Color="BSColor.Light" IsFixedTop=true>
    <div class="container-fluid">
        <BSNavbarBrand Url="#">Alicante</BSNavbarBrand>
        <BSCollapse IsInNavbar="true">
            <Toggler>
                <BSNavbarToggle />
            </Toggler>
            <Content>
                <BSNav MarginEnd="Margins.Auto" MarginBottom="Margins.Small" Class="mb-lg-0">
                    <BSNavItem Url="tournament">Turneringer</BSNavItem>
                    <BSNavItem Url="player">Spillere</BSNavItem>
                    <BSNavItem Url="course">Baner</BSNavItem>
                    <BSNavItem Url="match">Matcher</BSNavItem>
                    <BSNavItem Url="result">Resultater</BSNavItem>
                    <BSNavItem Url="scores">Leaderboard</BSNavItem>
                    @*                     <AuthorizeView Roles="@AppRoles.Admin">
                        <BSNavItem Url="preconditions">Preconditions</BSNavItem>
                        <BSNavItem Url="logging">Logging</BSNavItem>
                        <BSNavItem Url="admin">Admin</BSNavItem>
                    </AuthorizeView> *@
                </BSNav>
            </Content>
        </BSCollapse>
        @if (activeTournament != null) {
            <BSNavbarBrand class="d-flex">@activeTournament.TournamentName</BSNavbarBrand>
        }
        else
        {
            <BSNavbarBrand class="d-flex">- ingen aktuel turnering -</BSNavbarBrand>
        }
        <div class="d-flex">
            <AuthorizeView Context="AuthenticationState">
                <div class="navbar-text">
                    @AuthenticationState?.User?.Identity?.Name
                    <AuthorizeView Roles="Admin">
                        <Authorized>
                            (Admin)
                        </Authorized>
                        <NotAuthorized>
                            (Read Only)
                        </NotAuthorized>
                    </AuthorizeView>
                </div>
            </AuthorizeView>
@*             <LoginDisplay></LoginDisplay>
 *@        </div>
    </div>
</BSNavbar>

@code {
    private string? currentUrl;

    [CascadingParameter]
    int tournamentId { get; set; }

    [Inject] public AppState _appState { get; set; }
    [Inject] public IRepository _repo { get; set; }
    public TournamentModel activeTournament { get; set; }

    protected override async Task OnInitializedAsync()
    {
        currentUrl = NavigationManager.ToBaseRelativePath(NavigationManager.Uri);
        NavigationManager.LocationChanged += OnLocationChanged;
        activeTournament = await _repo.GetAciveTournament();
        _appState.TournamentId = activeTournament!.TournamentId;
    }

    private void OnLocationChanged(object? sender, LocationChangedEventArgs e)
    {
        currentUrl = NavigationManager.ToBaseRelativePath(e.Location);
        StateHasChanged();
    }

    public void Dispose()
    {
        NavigationManager.LocationChanged -= OnLocationChanged;
    }
}